#include <Wire.h>
#include <Adafruit_MCP4725.h>
//dac object
Adafruit_MCP4725 dac;
//counting variable i for various loops
int i;
//sampling frequency and period in micro seconds
const unsigned long periodSamplingMicros = 550;
//Look up table to create gaussian samples using uniformly random index
const float gaussLUT[512] = {
  -0.330000000000000,-0.317267399267399,-0.292446886446886,-0.277135531135531,-0.265692307692308,-0.256666666666667,-0.249091575091575,-0.242483516483517,-0.236681318681319,
  -0.231523809523810,-0.226849816849817,-0.222498168498168,-0.218468864468864,-0.214600732600733,-0.211216117216117,-0.207831501831502,-0.204769230769231,-0.201706959706960,
  -0.198805860805861,-0.196227106227106,-0.193648351648352,-0.191069597069597,-0.188652014652015,-0.186395604395604,-0.184139194139194,-0.182043956043956,-0.179948717948718,
  -0.177853479853480,-0.175919413919414,-0.173985347985348,-0.172051282051282,-0.170278388278388,-0.168505494505494,-0.166732600732601,-0.165120879120879,-0.163509157509157,
  -0.161897435897436,-0.160285714285714,-0.158673992673993,-0.157223443223443,-0.155772893772894,-0.154322344322344,-0.152871794871795,-0.151421245421245,-0.149970695970696,
  -0.148681318681319,-0.147391941391941,-0.146102564102564,-0.144813186813187,-0.143523809523810,-0.142234432234432,-0.140945054945055,-0.139816849816850,-0.138527472527473,
  -0.137399267399267,-0.136109890109890,-0.134981684981685,-0.133853479853480,-0.132725274725275,-0.131597069597070,-0.130630036630037,-0.129501831501831,-0.128373626373626,
  -0.127406593406593,-0.126278388278388,-0.125311355311355,-0.124183150183150,-0.123216117216117,-0.122249084249084,-0.121120879120879,-0.120153846153846,-0.119186813186813,
  -0.118219780219780,-0.117252747252747,-0.116285714285714,-0.115479853479853,-0.114512820512820,-0.113545787545788,-0.112578754578755,-0.111772893772894,-0.110805860805861,
  -0.110000000000000,-0.109032967032967,-0.108227106227106,-0.107260073260073,-0.106454212454212,-0.105487179487179,-0.104681318681319,-0.103875457875458,-0.103069597069597,
  -0.102263736263736,-0.101296703296703,-0.100490842490842,-0.0996849816849817,-0.0988791208791209,-0.0980732600732601,-0.0972673992673993,-0.0964615384615385,-0.0956556776556776,
  -0.0948498168498168,-0.0942051282051282,-0.0933992673992674,-0.0925934065934066,-0.0917875457875458,-0.0911428571428571,-0.0903369963369963,-0.0895311355311355,-0.0887252747252747,
  -0.0880805860805860,-0.0872747252747252,-0.0866300366300366,-0.0858241758241758,-0.0851794871794872,-0.0843736263736264,-0.0837289377289377,-0.0829230769230769,-0.0822783882783883,
  -0.0814725274725275,-0.0808278388278388,-0.0800219780219780,-0.0793772893772894,-0.0787326007326007,-0.0779267399267399,-0.0772820512820513,-0.0766373626373626,-0.0759926739926740,
  -0.0751868131868132,-0.0745421245421245,-0.0738974358974359,-0.0732527472527473,-0.0726080586080586,-0.0718021978021978,-0.0711575091575091,-0.0705128205128205,-0.0698681318681318,
  -0.0692234432234432,-0.0685787545787546,-0.0679340659340659,-0.0672893772893773,-0.0666446886446886,-0.0660000000000000,-0.0653553113553113,-0.0647106227106227,-0.0640659340659341,
  -0.0634212454212454,-0.0627765567765568,-0.0621318681318681,-0.0614871794871795,-0.0608424908424908,-0.0601978021978022,-0.0595531135531135,-0.0589084249084249,-0.0582637362637362,
  -0.0577802197802197,-0.0571355311355311,-0.0564908424908425,-0.0558461538461538,-0.0552014652014652,-0.0547179487179487,-0.0540732600732601,-0.0534285714285714,-0.0527838827838828,
  -0.0521391941391941,-0.0516556776556776,-0.0510109890109890,-0.0503663003663004,-0.0498827838827839,-0.0492380952380952,-0.0485934065934066,-0.0479487179487179,-0.0474652014652015,
  -0.0468205128205128,-0.0461758241758242,-0.0456923076923077,-0.0450476190476190,-0.0444029304029304,-0.0439194139194139,-0.0432747252747252,-0.0427912087912088,-0.0421465201465201,
  -0.0415018315018315,-0.0410183150183150,-0.0403736263736263,-0.0398901098901099,-0.0392454212454212,-0.0386007326007326,-0.0381172161172161,-0.0374725274725275,-0.0369890109890110,
  -0.0363443223443223,-0.0358608058608058,-0.0352161172161172,-0.0347326007326007,-0.0340879120879121,-0.0336043956043956,-0.0329597069597070,-0.0324761904761905,-0.0318315018315018,
  -0.0313479853479854,-0.0307032967032967,-0.0302197802197802,-0.0295750915750916,-0.0290915750915751,-0.0284468864468864,-0.0279633699633699,-0.0273186813186813,-0.0268351648351648,
  -0.0261904761904762,-0.0257069597069597,-0.0252234432234432,-0.0245787545787546,-0.0240952380952381,-0.0234505494505494,-0.0229670329670329,-0.0223223443223443,-0.0218388278388278,
  -0.0213553113553113,-0.0207106227106227,-0.0202271062271062,-0.0195824175824176,-0.0190989010989011,-0.0186153846153846,-0.0179706959706960,-0.0174871794871795,-0.0168424908424908,
  -0.0163589743589744,-0.0158754578754579,-0.0152307692307692,-0.0147472527472527,-0.0141025641025641,-0.0136190476190476,-0.0131355311355311,-0.0124908424908425,-0.0120073260073260,
  -0.0115238095238095,-0.0108791208791208,-0.0103956043956044,-0.00991208791208789,-0.00926739926739923,-0.00878388278388278,-0.00813919413919413,-0.00765567765567763,-0.00717216117216117,
  -0.00652747252747252,-0.00604395604395602,-0.00556043956043952,-0.00491575091575092,-0.00443223443223442,-0.00394871794871792,-0.00330402930402927,-0.00282051282051281,-0.00233699633699631,
  -0.00169230769230766,-0.00120879120879120,-0.000725274725274705,-8.05860805860537e-05,0.000402930402930402,0.00104761904761905,0.00153113553113555,0.00201465201465205,0.00265934065934066,
  0.00314285714285716,0.00362637362637366,0.00427106227106231,0.00475457875457877,0.00523809523809526,0.00588278388278392,0.00636630036630037,0.00684981684981687,0.00749450549450552,
  0.00797802197802198,0.00846153846153848,0.00910622710622713,0.00958974358974363,0.0102344322344322,0.0107179487179487,0.0112014652014652,0.0118461538461539,0.0123296703296703,
  0.0128131868131868,0.0134578754578755,0.0139413919413919,0.0144249084249084,0.0150695970695971,0.0155531135531136,0.0161978021978022,0.0166813186813187,0.0171648351648352,
  0.0178095238095238,0.0182930402930403,0.0189377289377290,0.0194212454212455,0.0199047619047619,0.0205494505494506,0.0210329670329671,0.0216776556776557,0.0221611721611722,
  0.0226446886446887,0.0232893772893773,0.0237728937728938,0.0244175824175824,0.0249010989010989,0.0255457875457876,0.0260293040293040,0.0265128205128205,0.0271575091575092,
  0.0276410256410256,0.0282857142857143,0.0287692307692308,0.0294139194139194,0.0298974358974359,0.0305421245421246,0.0310256410256410,0.0316703296703297,0.0321538461538462,
  0.0327985347985348,0.0332820512820513,0.0339267399267400,0.0344102564102564,0.0350549450549451,0.0355384615384616,0.0361831501831502,0.0366666666666667,0.0373113553113553,
  0.0377948717948718,0.0384395604395605,0.0389230769230769,0.0395677655677656,0.0402124542124542,0.0406959706959707,0.0413406593406593,0.0418241758241758,0.0424688644688645,
  0.0431135531135531,0.0435970695970696,0.0442417582417582,0.0447252747252747,0.0453699633699634,0.0460146520146521,0.0464981684981685,0.0471428571428572,0.0477875457875458,
  0.0482710622710623,0.0489157509157510,0.0495604395604396,0.0502051282051282,0.0506886446886447,0.0513333333333334,0.0519780219780220,0.0524615384615385,0.0531062271062271,
  0.0537509157509158,0.0543956043956044,0.0550402930402931,0.0555238095238095,0.0561684981684982,0.0568131868131868,0.0574578754578755,0.0581025641025641,0.0585860805860806,
  0.0592307692307692,0.0598754578754579,0.0605201465201466,0.0611648351648352,0.0618095238095239,0.0624542124542125,0.0630989010989011,0.0637435897435898,0.0643882783882784,
  0.0650329670329671,0.0656776556776557,0.0663223443223443,0.0669670329670330,0.0676117216117216,0.0682564102564103,0.0689010989010989,0.0695457875457876,0.0701904761904762,
  0.0708351648351648,0.0714798534798535,0.0721245421245421,0.0729304029304029,0.0735750915750916,0.0742197802197802,0.0748644688644689,0.0755091575091575,0.0763150183150183,
  0.0769597069597070,0.0776043956043957,0.0782490842490843,0.0790549450549451,0.0796996336996338,0.0803443223443224,0.0811501831501832,0.0817948717948718,0.0826007326007326,
  0.0832454212454213,0.0840512820512821,0.0846959706959707,0.0855018315018315,0.0861465201465202,0.0869523809523810,0.0875970695970696,0.0884029304029304,0.0890476190476191,
  0.0898534798534799,0.0906593406593407,0.0914652014652015,0.0921098901098901,0.0929157509157509,0.0937216117216117,0.0945274725274725,0.0951721611721612,0.0959780219780220,
  0.0967838827838828,0.0975897435897436,0.0983956043956044,0.0992014652014652,0.100007326007326,0.100813186813187,0.101619047619048,0.102586080586081,0.103391941391941,
  0.104197802197802,0.105003663003663,0.105809523809524,0.106776556776557,0.107582417582418,0.108549450549451,0.109355311355311,0.110322344322344,0.111128205128205,
  0.112095238095238,0.112901098901099,0.113868131868132,0.114835164835165,0.115802197802198,0.116608058608059,0.117575091575092,0.118542124542125,0.119509157509158,
  0.120476190476190,0.121443223443223,0.122571428571429,0.123538461538462,0.124505494505495,0.125633699633700,0.126600732600733,0.127728937728938,0.128695970695971,
  0.129824175824176,0.130952380952381,0.131919413919414,0.133047619047619,0.134175824175824,0.135304029304029,0.136432234432234,0.137721611721612,0.138849816849817,
  0.140139194139194,0.141267399267399,0.142556776556777,0.143846153846154,0.145135531135531,0.146424908424908,0.147714285714286,0.149003663003663,0.150293040293040,
  0.151743589743590,0.153194139194139,0.154644688644689,0.156095238095238,0.157545787545788,0.158996336996337,0.160608058608059,0.162219780219780,0.163831501831502,
  0.165443223443223,0.167054945054945,0.168827838827839,0.170600732600733,0.172373626373626,0.174307692307692,0.176241758241758,0.178175824175824,0.180271062271062,
  0.182366300366300,0.184461538461539,0.186717948717949,0.188974358974359,0.191391941391941,0.193970695970696,0.196549450549451,0.199128205128205,0.202029304029304,
  0.205091575091575,0.208153846153846,0.211538461538462,0.214923076923077,0.218791208791209,0.222820512820513,0.227172161172161,0.231846153846154,0.237003663003663,
  0.242805860805861,0.249413919413919,0.256989010989011,0.266014652014652,0.277457875457876,0.292769230769231,0.317589743589744,0.330000000000000
};
/*
const PROGMEM float gaussLUT[512] = {
  -1.65000000000000, -1.58633699633700, -1.46223443223443, -1.38567765567766, -1.32846153846154, -1.28333333333333, -1.24545787545788, -1.21241758241758,
  -1.18340659340659, -1.15761904761905, -1.13424908424908, -1.11249084249084, -1.09234432234432, -1.07300366300366, -1.05608058608059, -1.03915750915751,
  -1.02384615384615, -1.00853479853480, -0.994029304029304, -0.981135531135531, -0.968241758241758, -0.955347985347985, -0.943260073260073, -0.931978021978022,
  -0.920695970695971, -0.910219780219780, -0.899743589743590, -0.889267399267399, -0.879597069597070, -0.869926739926740, -0.860256410256410, -0.851391941391941,
  -0.842527472527472, -0.833663003663004, -0.825604395604396, -0.817545787545787, -0.809487179487179, -0.801428571428571, -0.793369963369963, -0.786117216117216,
  -0.778864468864469, -0.771611721611722, -0.764358974358974, -0.757106227106227, -0.749853479853480, -0.743406593406593, -0.736959706959707, -0.730512820512820,
  -0.724065934065934, -0.717619047619048, -0.711172161172161, -0.704725274725275, -0.699084249084249, -0.692637362637363, -0.686996336996337, -0.680549450549451,
  -0.674908424908425, -0.669267399267399, -0.663626373626374, -0.657985347985348, -0.653150183150183, -0.647509157509157, -0.641868131868132, -0.637032967032967,
  -0.631391941391941, -0.626556776556777, -0.620915750915751, -0.616080586080586, -0.611245421245421, -0.605604395604396, -0.600769230769231, -0.595934065934066,
  -0.591098901098901, -0.586263736263736, -0.581428571428571, -0.577399267399267, -0.572564102564102, -0.567728937728938, -0.562893772893773, -0.558864468864469,
  -0.554029304029304, -0.550000000000000, -0.545164835164835, -0.541135531135531, -0.536300366300366, -0.532271062271062, -0.527435897435897, -0.523406593406593,
  -0.519377289377289, -0.515347985347985, -0.511318681318681, -0.506483516483516, -0.502454212454212, -0.498424908424908, -0.494395604395604, -0.490366300366300,
  -0.486336996336996, -0.482307692307692, -0.478278388278388, -0.474249084249084, -0.471025641025641, -0.466996336996337, -0.462967032967033, -0.458937728937729,
  -0.455714285714286, -0.451684981684982, -0.447655677655678, -0.443626373626373, -0.440402930402930, -0.436373626373626, -0.433150183150183, -0.429120879120879,
  -0.425897435897436, -0.421868131868132, -0.418644688644689, -0.414615384615385, -0.411391941391941, -0.407362637362637, -0.404139194139194, -0.400109890109890,
  -0.396886446886447, -0.393663003663004, -0.389633699633700, -0.386410256410256, -0.383186813186813, -0.379963369963370, -0.375934065934066, -0.372710622710623,
  -0.369487179487179, -0.366263736263736, -0.363040293040293, -0.359010989010989, -0.355787545787546, -0.352564102564102, -0.349340659340659, -0.346117216117216,
  -0.342893772893773, -0.339670329670330, -0.336446886446886, -0.333223443223443, -0.330000000000000, -0.326776556776557, -0.323553113553114, -0.320329670329670,
  -0.317106227106227, -0.313882783882784, -0.310659340659341, -0.307435897435897, -0.304212454212454, -0.300989010989011, -0.297765567765568, -0.294542124542125,
  -0.291318681318681, -0.288901098901099, -0.285677655677656, -0.282454212454212, -0.279230769230769, -0.276007326007326, -0.273589743589743, -0.270366300366300,
  -0.267142857142857, -0.263919413919414, -0.260695970695971, -0.258278388278388, -0.255054945054945, -0.251831501831502, -0.249413919413919, -0.246190476190476,
  -0.242967032967033, -0.239743589743590, -0.237326007326007, -0.234102564102564, -0.230879120879121, -0.228461538461538, -0.225238095238095, -0.222014652014652,
  -0.219597069597069, -0.216373626373626, -0.213956043956044, -0.210732600732601, -0.207509157509157, -0.205091575091575, -0.201868131868132, -0.199450549450549,
  -0.196227106227106, -0.193003663003663, -0.190586080586080, -0.187362637362637, -0.184945054945055, -0.181721611721612, -0.179304029304029, -0.176080586080586,
  -0.173663003663004, -0.170439560439560, -0.168021978021978, -0.164798534798535, -0.162380952380952, -0.159157509157509, -0.156739926739927, -0.153516483516484,
  -0.151098901098901, -0.147875457875458, -0.145457875457875, -0.142234432234432, -0.139816849816850, -0.136593406593406, -0.134175824175824, -0.130952380952381,
  -0.128534798534798, -0.126117216117216, -0.122893772893773, -0.120476190476190, -0.117252747252747, -0.114835164835165, -0.111611721611722, -0.109194139194139,
  -0.106776556776557, -0.103553113553113, -0.101135531135531, -0.0979120879120878, -0.0954945054945053, -0.0930769230769231, -0.0898534798534798, -0.0874358974358973,
  -0.0842124542124541, -0.0817948717948718, -0.0793772893772893, -0.0761538461538460, -0.0737362637362637, -0.0705128205128205, -0.0680952380952380, -0.0656776556776555,
  -0.0624542124542125, -0.0600366300366300, -0.0576190476190475, -0.0543956043956042, -0.0519780219780219, -0.0495604395604394, -0.0463369963369962, -0.0439194139194139,
  -0.0406959706959706, -0.0382783882783881, -0.0358608058608059, -0.0326373626373626, -0.0302197802197801, -0.0278021978021976, -0.0245787545787546, -0.0221611721611721,
  -0.0197435897435896, -0.0165201465201463, -0.0141025641025641, -0.0116849816849816, -0.00846153846153830, -0.00604395604395602, -0.00362637362637352,
  -0.000402930402930268, 0.00201465201465201, 0.00523809523809526, 0.00765567765567776, 0.0100732600732603, 0.0132967032967033, 0.0157142857142858, 0.0181318681318683,
  0.0213553113553115, 0.0237728937728938, 0.0261904761904763, 0.0294139194139196, 0.0318315018315019, 0.0342490842490844, 0.0374725274725276, 0.0398901098901099,
  0.0423076923076924, 0.0455311355311356, 0.0479487179487181, 0.0511721611721612, 0.0535897435897437, 0.0560073260073262, 0.0592307692307694, 0.0616483516483517,
  0.0640659340659342, 0.0672893772893775, 0.0697069597069597, 0.0721245421245422, 0.0753479853479855, 0.0777655677655678, 0.0809890109890110, 0.0834065934065935,
  0.0858241758241760, 0.0890476190476190, 0.0914652014652015, 0.0946886446886448, 0.0971062271062273, 0.0995238095238096, 0.102747252747253, 0.105164835164835,
  0.108388278388279, 0.110805860805861, 0.113223443223443, 0.116446886446887, 0.118864468864469, 0.122087912087912, 0.124505494505495, 0.127728937728938,
  0.130146520146520, 0.132564102564103, 0.135787545787546, 0.138205128205128, 0.141428571428571, 0.143846153846154, 0.147069597069597, 0.149487179487180,
  0.152710622710623, 0.155128205128205, 0.158351648351649, 0.160769230769231, 0.163992673992674, 0.166410256410257, 0.169633699633700, 0.172051282051282,
  0.175274725274725, 0.177692307692308, 0.180915750915751, 0.183333333333333, 0.186556776556777, 0.188974358974359, 0.192197802197802, 0.194615384615385,
  0.197838827838828, 0.201062271062271, 0.203479853479854, 0.206703296703297, 0.209120879120879, 0.212344322344322, 0.215567765567766, 0.217985347985348,
  0.221208791208791, 0.223626373626374, 0.226849816849817, 0.230073260073260, 0.232490842490843, 0.235714285714286, 0.238937728937729, 0.241355311355312,
  0.244578754578755, 0.247802197802198, 0.251025641025641, 0.253443223443224, 0.256666666666667, 0.259890109890110, 0.262307692307692, 0.265531135531136,
  0.268754578754579, 0.271978021978022, 0.275201465201465, 0.277619047619048, 0.280842490842491, 0.284065934065934, 0.287289377289377, 0.290512820512821,
  0.292930402930403, 0.296153846153846, 0.299377289377289, 0.302600732600733, 0.305824175824176, 0.309047619047619, 0.312271062271062, 0.315494505494506,
  0.318717948717949, 0.321941391941392, 0.325164835164835, 0.328388278388279, 0.331611721611722, 0.334835164835165, 0.338058608058608, 0.341282051282051,
  0.344505494505495, 0.347728937728938, 0.350952380952381, 0.354175824175824, 0.357399267399268, 0.360622710622711, 0.364652014652015, 0.367875457875458,
  0.371098901098901, 0.374322344322344, 0.377545787545788, 0.381575091575092, 0.384798534798535, 0.388021978021978, 0.391245421245421, 0.395274725274725,
  0.398498168498169, 0.401721611721612, 0.405750915750916, 0.408974358974359, 0.413003663003663, 0.416227106227106, 0.420256410256410, 0.423479853479853,
  0.427509157509157, 0.430732600732601, 0.434761904761905, 0.437985347985348, 0.442014652014652, 0.445238095238095, 0.449267399267399, 0.453296703296703,
  0.457326007326008, 0.460549450549451, 0.464578754578755, 0.468608058608059, 0.472637362637363, 0.475860805860806, 0.479890109890110, 0.483919413919414,
  0.487948717948718, 0.491978021978022, 0.496007326007326, 0.500036630036630, 0.504065934065934, 0.508095238095238, 0.512930402930403, 0.516959706959707,
  0.520989010989011, 0.525018315018315, 0.529047619047619, 0.533882783882784, 0.537912087912088, 0.542747252747253, 0.546776556776557, 0.551611721611722,
  0.555641025641026, 0.560476190476190, 0.564505494505495, 0.569340659340659, 0.574175824175824, 0.579010989010989, 0.583040293040293, 0.587875457875458,
  0.592710622710623, 0.597545787545788, 0.602380952380953, 0.607216117216118, 0.612857142857143, 0.617692307692308, 0.622527472527473, 0.628168498168498,
  0.633003663003663, 0.638644688644689, 0.643479853479854, 0.649120879120879, 0.654761904761905, 0.659597069597070, 0.665238095238095, 0.670879120879121,
  0.676520146520147, 0.682161172161172, 0.688608058608059, 0.694249084249084, 0.700695970695971, 0.706336996336996, 0.712783882783883, 0.719230769230769,
  0.725677655677656, 0.732124542124542, 0.738571428571429, 0.745018315018315, 0.751465201465202, 0.758717948717949, 0.765970695970696, 0.773223443223444,
  0.780476190476191, 0.787728937728938, 0.794981684981685, 0.803040293040293, 0.811098901098901, 0.819157509157509, 0.827216117216117, 0.835274725274725,
  0.844139194139194, 0.853003663003663, 0.861868131868132, 0.871538461538462, 0.881208791208791, 0.890879120879121, 0.901355311355311, 0.911831501831502,
  0.922307692307693, 0.933589743589744, 0.944871794871795, 0.956959706959707, 0.969853479853480, 0.982747252747253, 0.995641025641026, 1.01014652014652,
  .02545787545788, 1.04076923076923, 1.05769230769231, 1.07461538461538, 1.09395604395604, 1.11410256410256, 1.13586080586081, 1.15923076923077, 1.18501831501832,
  1.21402930402930, 1.24706959706960, 1.28494505494506, 1.33007326007326, 1.38728937728938, 1.46384615384615, 1.58794871794872, 1.65000000000000
};
*/

/*
const int gaussLUT[512] = {
  -2048, -1969, -1815, -1720, -1649, -1593, -1546, -1505, -1469, -1437, -1408, -1381, -1356, -1332, -1311, -1290, -1271, -1252, -1234, -1218, -1202, -1186, -1171, -1157, -1143,
  -1130, -1117, -1104, -1092, -1080, -1068, -1057, -1046, -1035, -1025, -1015, -1005, -995, -985, -976, -967, -958, -949, -940, -931, -923, -915, -907, -899, -891, -883, -875, -868,
  -860, -853, -845, -838, -831, -824, -817, -811, -804, -797, -791, -784, -778, -771, -765, -759, -752, -746, -740, -734, -728, -722, -717, -711, -705, -699, -694, -688, -683, -677,
  -672, -666, -661, -655, -650, -645, -640, -635, -629, -624, -619, -614, -609, -604, -599, -594, -589, -585, -580, -575, -570, -566, -561, -556, -551, -547, -542, -538, -533, -529,
  -524, -520, -515, -511, -506, -502, -497, -493, -489, -484, -480, -476, -472, -467, -463, -459, -455, -451, -446, -442, -438, -434, -430, -426, -422, -418, -414, -410, -406, -402,
  -398, -394, -390, -386, -382, -378, -374, -370, -366, -362, -359, -355, -351, -347, -343, -340, -336, -332, -328, -324, -321, -317, -313, -310, -306, -302, -298, -295, -291, -287,
  -284, -280, -276, -273, -269, -266, -262, -258, -255, -251, -248, -244, -240, -237, -233, -230, -226, -223, -219, -216, -212, -209, -205, -202, -198, -195, -191, -188, -184, -181,
  -177, -174, -170, -167, -163, -160, -157, -153, -150, -146, -143, -139, -136, -133, -129, -126, -122, -119, -116, -112, -109, -105, -102, -99, -95, -92, -88, -85, -82, -78, -75, -72,
  -68, -65, -62, -58, -55, -51, -48, -45, -41, -38, -35, -31, -28, -25, -21, -18, -15, -11, -8, -5, -1, 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 63, 66, 69, 73, 76, 79,
  83, 86, 89, 93, 96, 100, 103, 106, 110, 113, 117, 120, 123, 127, 130, 134, 137, 140, 144, 147, 151, 154, 158, 161, 164, 168, 171, 175, 178, 182, 185, 189, 192, 196, 199, 203, 206, 210, 213,
  217, 220, 224, 227, 231, 234, 238, 241, 245, 249, 252, 256, 259, 263, 267, 270, 274, 277, 281, 285, 288, 292, 296, 299, 303, 307, 311, 314, 318, 322, 325, 329, 333, 337, 341, 344, 348, 352,
  356, 360, 363, 367, 371, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 443, 447, 452, 456, 460, 464, 468, 473, 477, 481, 485, 490, 494, 498, 503, 507,
  512, 516, 521, 525, 530, 534, 539, 543, 548, 552, 557, 562, 567, 571, 576, 581, 586, 590, 595, 600, 605, 610, 615, 620, 625, 630, 636, 641, 646, 651, 656, 662, 667, 673, 678, 684, 689, 695,
  700, 706, 712, 718, 723, 729, 735, 741, 747, 753, 760, 766, 772, 779, 785, 792, 798, 805, 812, 818, 825, 832, 839, 846, 854, 861, 869, 876, 884, 892, 900, 908, 916, 924, 932, 941, 950, 959,
  968, 977, 986, 996, 1006, 1016, 1026, 1036, 1047, 1058, 1069, 1081, 1093, 1105, 1118, 1131, 1144, 1158, 1172, 1187, 1203, 1219, 1235, 1253, 1272, 1291, 1312, 1333, 1357, 1382, 1409,
  1438, 1470, 1506, 1547, 1594, 1650, 1721, 1816, 1970, 2047
};
*/

const uint16_t gaussLUTQuant[512] = {
  0,79,233,328,399,455,502,543,579,611,640,667,692,716,737,758,777,796,814,830,846,862,877,891,905,918,931,944,956,968,980,991,1002,1013,1023,1033,1043,1053,1063,1072,1081,1090,1099,1108,
  1117,1125,1133,1141,1149,1157,1165,1173,1180,1188,1195,1203,1210,1217,1224,1231,1237,1244,1251,1257,1264,1270,1277,1283,1289,1296,1302,1308,1314,1320,1326,1331,1337,1343,1349,1354,1360,
  1365,1371,1376,1382,1387,1393,1398,1403,1408,1413,1419,1424,1429,1434,1439,1444,1449,1454,1459,1463,1468,1473,1478,1482,1487,1492,1497,1501,1506,1510,1515,1519,1524,1528,1533,1537,1542,
  1546,1551,1555,1559,1564,1568,1572,1576,1581,1585,1589,1593,1597,1602,1606,1610,1614,1618,1622,1626,1630,1634,1638,1642,1646,1650,1654,1658,1662,1666,1670,1674,1678,1682,1686,1689,1693,
  1697,1701,1705,1708,1712,1716,1720,1724,1727,1731,1735,1738,1742,1746,1750,1753,1757,1761,1764,1768,1772,1775,1779,1782,1786,1790,1793,1797,1800,1804,1808,1811,1815,1818,1822,1825,1829,
  1832,1836,1839,1843,1846,1850,1853,1857,1860,1864,1867,1871,1874,1878,1881,1885,1888,1891,1895,1898,1902,1905,1909,1912,1915,1919,1922,1926,1929,1932,1936,1939,1943,1946,1949,1953,1956,
  1960,1963,1966,1970,1973,1976,1980,1983,1986,1990,1993,1997,2000,2003,2007,2010,2013,2017,2020,2023,2027,2030,2033,2037,2040,2043,2047,2050,2054,2057,2060,2064,2067,2070,2074,2077,2080,
  2084,2087,2090,2094,2097,2100,2104,2107,2111,2114,2117,2121,2124,2127,2131,2134,2137,2141,2144,2148,2151,2154,2158,2161,2165,2168,2171,2175,2178,2182,2185,2188,2192,2195,2199,2202,2206,
  2209,2212,2216,2219,2223,2226,2230,2233,2237,2240,2244,2247,2251,2254,2258,2261,2265,2268,2272,2275,2279,2282,2286,2289,2293,2297,2300,2304,2307,2311,2315,2318,2322,2325,2329,2333,2336,
  2340,2344,2347,2351,2355,2359,2362,2366,2370,2373,2377,2381,2385,2389,2392,2396,2400,2404,2408,2411,2415,2419,2423,2427,2431,2435,2439,2443,2447,2451,2455,2459,2463,2467,2471,2475,2479,
  2483,2487,2491,2495,2500,2504,2508,2512,2516,2521,2525,2529,2533,2538,2542,2546,2551,2555,2560,2564,2569,2573,2578,2582,2587,2591,2596,2600,2605,2610,2615,2619,2624,2629,2634,2638,2643,
  2648,2653,2658,2663,2668,2673,2678,2684,2689,2694,2699,2704,2710,2715,2721,2726,2732,2737,2743,2748,2754,2760,2766,2771,2777,2783,2789,2795,2801,2808,2814,2820,2827,2833,2840,2846,2853,
  2860,2866,2873,2880,2887,2894,2902,2909,2917,2924,2932,2940,2948,2956,2964,2972,2980,2989,2998,3007,3016,3025,3034,3044,3054,3064,3074,3084,3095,3106,3117,3129,3141,3153,3166,3179,3192,
  3206,3220,3235,3251,3267,3283,3301,3320,3339,3360,3381,3405,3430,3457,3486,3518,3554,3595,3642,3698,3769,3864,4018,4095
};

//sample arrays for testing
//uint16_t uniformSamples[512];
//uint16_t normalSamples[512];
//number of filter taps --> determines size of data window and amount of computations needed for every sample
//const uint16_t filterTaps = 21;
/*
const float rain[filterTaps] = {
  0.00165126921912590,0.00204094022958241,0.00271596035354771,0.00547798218377430,0.0109110537879878,0.0192045571852442,
  0.0237752847292558,0.00121096699065111,0.0100919213439869,0.141252868745404,0.245442888242922,0.141252868745404,
  0.0100919213439869,0.00121096699065113,0.0237752847292558,0.0192045571852442,0.0109110537879878,0.00547798218377429,
  0.00271596035354771,0.00204094022958241,0.00165126921912590
};*/
//data window
//float window[filterTaps];
//variable for each created sample
float sample = 0;
float sampleLast1 = 0;
float sampleLast2 = 0;
float maximum = 0;
uint16_t sampleQuant = 2048;
float denom[3] = { 1, -1.45623058, 0.81 };  // check if it is faster to store this in memory or not
//current position inside data window --> enables data window to operate in a circular fashion so entire window doesn't have to be re-written for each new sample
//uint16_t windowPosition = 0;
//constant for converting dac quantization level to a voltage --> divide by it to convert the voltage back into a dac level
float dacConvert = 4095 / 3.3;
//microsecond timers ensure output data rate
unsigned long previousMicros = micros();
unsigned long currentMicros;
//sampling period test variable
uint16_t j = 0;
const uint16_t numPeriods = 1350;
unsigned long periods[numPeriods];
float periodAverage = 0;



void setup() {
  //start serial and wait for a moment
  Serial.begin(9600);
  delay(100);

  //seed random number generator with open analog pin
  randomSeed(analogRead(0));

  //check DAC initialization
  if (dac.begin(0x62))  //could be 0x60 or 0x62
  {
    Serial.println("MCP4725 Initialized Successfully.");
    Wire.setClock(400000L);
    periodAverage = 0;
  } else {
    Serial.println("Failed to Initialize MCP4725.");
  }

  /*
  dac.setVoltage(0, false);
  delay(500);
  dac.setVoltage(500, false);
  delay(500);
  dac.setVoltage(1000, false);
  delay(500);
  dac.setVoltage(1500, false);
  delay(500);
  dac.setVoltage(2048, false);
  delay(500);
  dac.setVoltage(2500, false);
  delay(500);
  dac.setVoltage(3000, false);
  delay(500);
  dac.setVoltage(3500, false);
  delay(500);
  dac.setVoltage(4095, false);
  delay(2000);
  */
   /*
  //initialize data window to zeros
  for (i = 0; i < filterTaps; i++) {
    window[i] = 0;
  }
  */

  //make filter a moving average -- remove once filter is chosen
  /*
  for(i = 0; i < filterTaps; i++){
    impulse[i] = 1/float(filterTaps);
  }
  */

  //normal/uniform sample generation test code
  /*
  for(i = 0; i < 128; i++){
    uniformSamples[i] = random(4095);
  }
  for(i = 0; i < 128; i++){
    normalSamples[i] = gaussLUT[random(511)];
  }
  */
}


void loop() {
  /*
  sample = gaussLUT[random(512)];
  dac.setVoltage(sample, false);
  delay(1);
  */

  //check time to see if we should update output
  currentMicros = micros();
  if (((currentMicros-previousMicros) >= periodSamplingMicros)) {
    
    //period test
    //periods[j] = currentMicros - previousMicros;
    //j++;

    //update time keeping variable
    previousMicros = currentMicros;

    //set new output
    //dac.setVoltage(gaussLUTQuant[random(512)], false);

    /*
    if (sampleQuant > 4095) {
      dac.setVoltage(4095, false);
    } else {
      dac.setVoltage(sampleQuant, false);
    }
    */
    dac.setVoltage(sampleQuant, false);
    
    //calculate new sample
    sample = gaussLUT[random(512)] + (0.9 * sample);// - (0.81 * sampleLast2);
    if (sample > maximum){
      maximum = sample;
      Serial.println("New max:");
      Serial.println(maximum);
    }
    //sampleLast1 = sample;
    //sampleLast1 = sample;
    sampleQuant = uint16_t((sample + 1.65) * dacConvert);
    //sample = gaussLUT[random(512)];
    

    /*
    //increment max counter / print max every second
    if (maxCount == 16000){
      maxCount = 0;
      Serial.print('Current maximum is:');
      Serial.println(sampleMax);
      Serial.println(' ');
    }
    else{
      maxCount++;
    }
    */

    /*
    //create next input
    window[windowPosition] = gaussLUT[random(511)];

    //filter/create next ouput
    sample = 0;
    for (i = 0; i < filterTaps; i++) {
      if ((windowPosition + i) >= filterTaps) {
        sample = sample + (rain[i] * window[i + windowPosition - filterTaps]);
      } else {
        sample = sample + (rain[i] * window[i + windowPosition]);
      }
    }

    //update data window position
    if (windowPosition == 0) {
      windowPosition = filterTaps - 1;
    } else {
      windowPosition--;
    }
  
    */
  }
  
  /*
  if (j == numPeriods) {
    Serial.println("Period test results:");
    for (i = 2; i < numPeriods; i++) {
      periodAverage = periodAverage + periods[i];
    }
    periodAverage = periodAverage / numPeriods;
    Serial.println("Average Period:");
    Serial.println(periodAverage);
    j++;
    delay(100);
  }
  */


  //test code to create new samples using filtering -> used delay() so functionally abandonded
  /*
  //Serial.println("creating white noise sample. Window position:");
  //Serial.println(windowPosition);
  //Serial.println("Sample:");
  //add new input white noise sample to data window
  window[windowPosition] = (gaussLUT[random(511)] * dacConvert) - 1.65;
  
  Serial.println(window[windowPosition]); 
  Serial.println("current window/impusle:");
  for (i = 0; i < filterTaps; i++){
    Serial.println(window[i]);
  }
  Serial.println("filtering:");
  
  //perform filtering to generate new output sample
  sample = 0;
  for (i = 0; i < filterTaps; i++){
    if ((windowPosition + i) >= filterTaps){
      sample = sample + (rain[i] * window[i+windowPosition - filterTaps]);
    }
    else{
      sample = sample + (rain[i] * window[i+windowPosition]);
    }
  }
  //Serial.println(sample);
  //output sample
  dac.setVoltage(uint16_t((sample+1.65)/dacConvert),false);
  //Serial.println(' ');
  //update window
  if (windowPosition == 0){
    windowPosition = filterTaps - 1;
  }
  else{
    windowPosition--;
  }
  */


  //white noise test code
  /*
  dac.setVoltage(gaussLUT[random(511)], false);
  delay(periodSamplingMicro);
  */


  //square wave test code
  /*
  dac.setVoltage(0, false);  //Set voltage to 1V
  delay(periodSamplingMicro);
  dac.setVoltage(4095, false);  //Set voltage to 1V
  delay(periodSamplingMicro);
  */


  //sample generation test code
  /*
  for(i = 0; i < 512; i++){
    if (i < 128){
      dac.setVoltage(normalSamples[i], false);
      delay(periodSamplingMicro);
    }
    else if(i < 256){
      dac.setVoltage(0, false);
      delay(periodSamplingMicro);
    }
    else if(i < 384){
      dac.setVoltage(uniformSamples[i-256], false);
      delay(periodSamplingMicro);
    }
    else{
      dac.setVoltage(0, false);
      delay(periodSamplingMicro);
    }
  }
  */
  /*
  for(i = 0; i < 15000; i++){
    if (i<5000){
      dac.setVoltage(0, false);  //Set voltage to 1V
      delay(period);
      dac.setVoltage(4095, false);  //Set voltage to 1V
      delay(period);
    }
    else if (i < 10000){
      dac.setVoltage(random(4095), false);  //Set voltage to 1V
      delay(period);
    }
    else{
      dac.setVoltage(gaussLUT[random(511)], false);  //Set voltage to 1V
      delay(period);
    }
  }
  */
}
